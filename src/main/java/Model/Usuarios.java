package Model;
// Generated 12 ene 2024 22:06:41 by Hibernate Tools 6.3.1.Final

import Controlador.hibernateUtil;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.mindrot.jbcrypt.BCrypt;

/**
 * Usuarios generated by hbm2java
 */
@Entity
@Table(name = "usuarios")
@ToString
@Getter
@Setter
public class Usuarios implements java.io.Serializable {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "UserID")
  private Integer userId;

  @Column(name = "NombreUsuario", nullable = false)
  private String nombreUsuario;

  @Column(name = "NumeroTelefono")
  private String numeroTelefono;

  @Column(name = "CorreoElectronico", nullable = false, unique = true)
  private String correoElectronico;

  @Column(name = "Genero", nullable = false)
  private String genero;

  @Column(name = "Localidad")
  private String localidad;

  @Column(name = "Descripcion")
  private String descripcion;

  @Column(name = "Contraseña", nullable = false)
  private String contraseña;

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuariosByUsuarioSolicitanteId")
  private Set<Citas> citasesForUsuarioSolicitanteId = new HashSet<>(0);

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarios")
  private Set<Participanteseventos> participanteseventoses = new HashSet<>(0);

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarios")
  private Set<Likescitas> likescitases = new HashSet<>(0);

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarios")
  private Set<Eventos> eventoses = new HashSet<>(0);

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarios")
  private Set<Likeseventos> likeseventoses = new HashSet<>(0);

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuariosByUsuarioDestinoId")
  private Set<Citas> citasesForUsuarioDestinoId = new HashSet<>(0);

  /**
   * Instantiates a new Usuarios.
   */
  public Usuarios() {
  }

  /**
   * Instantiates a new Usuarios.
   *
   * @param nombreUsuario the nombre usuario
   * @param correoElectronico the correo electronico
   * @param genero the genero
   * @param contraseña the contraseña
   */
  public Usuarios(String nombreUsuario, String correoElectronico, String genero, String contraseña) {
    this.nombreUsuario = nombreUsuario;
    this.correoElectronico = correoElectronico;
    this.genero = genero;
    this.contraseña = contraseña;
  }

  /**
   * Crear contraseña string.
   *
   * @param contrasena the contrasena
   * @return the string
   */
  public static String crearContraseña(String contrasena){
    return BCrypt.hashpw(contrasena, BCrypt.gensalt(12));
  }

  /**
   * Guardar usuarios boolean.
   *
   * @param usuario the usuario
   * @return the boolean
   */
  public static boolean guardarUsuarios(Usuarios usuario) {
    SessionFactory sessionFactory = hibernateUtil.buildSessionFactory();
    Session session = sessionFactory.openSession();
    try {
      session.beginTransaction();
      usuario.setContraseña(crearContraseña(usuario.getContraseña()));
      session.save(usuario);
      session.getTransaction().commit();
      return true;
    } catch (Exception e) {
      if (session.getTransaction() != null) {
        session.getTransaction().rollback();
      }
      e.printStackTrace();
      return false;
    } finally {
      if (session != null && session.isOpen()) {
        session.close();
      }
    }


  }

  /**
   * Comprobar contraseña boolean.
   *
   * @param password the password
   * @param usuario the usuario
   * @return the boolean
   */
  public static boolean comprobarContraseña(String password, Usuarios usuario) {
    return BCrypt.checkpw(password, usuario.getContraseña());
  }

  /**
   * Encontrar por nombre de usuario usuarios.
   *
   * @param Username the username
   * @return the usuarios
   */
  public static Usuarios encontrarPorNombreDeUsuario(String Username) {
    SessionFactory sessionFactory = hibernateUtil.buildSessionFactory();
    Session session = sessionFactory.openSession();
    session.beginTransaction();
    try{
      return session.createQuery("from Usuarios where nombreUsuario = :username", Usuarios.class).setParameter("username", Username).getSingleResult();
    }catch(NoResultException e){
      return null;
    }finally{
      session.close();
    }
  }

  /**
   * Instantiates a new Usuarios.
   *
   * @param nombreUsuario the nombre usuario
   * @param numeroTelefono the numero telefono
   * @param correoElectronico the correo electronico
   * @param genero the genero
   * @param localidad the localidad
   * @param descripcion the descripcion
   * @param contraseña the contraseña
   * @param citasesForUsuarioSolicitanteId the citases for usuario solicitante id
   * @param participanteseventoses the participanteseventoses
   * @param likescitases the likescitases
   * @param eventoses the eventoses
   * @param likeseventoses the likeseventoses
   * @param citasesForUsuarioDestinoId the citases for usuario destino id
   */
  public Usuarios(String nombreUsuario, String numeroTelefono, String correoElectronico, String genero, String localidad, String descripcion, String contraseña, Set citasesForUsuarioSolicitanteId, Set participanteseventoses, Set likescitases, Set eventoses, Set likeseventoses, Set citasesForUsuarioDestinoId) {
    this.nombreUsuario = nombreUsuario;
    this.numeroTelefono = numeroTelefono;
    this.correoElectronico = correoElectronico;
    this.genero = genero;
    this.localidad = localidad;
    this.descripcion = descripcion;
    this.contraseña = contraseña;
    this.citasesForUsuarioSolicitanteId = citasesForUsuarioSolicitanteId;
    this.participanteseventoses = participanteseventoses;
    this.likescitases = likescitases;
    this.eventoses = eventoses;
    this.likeseventoses = likeseventoses;
    this.citasesForUsuarioDestinoId = citasesForUsuarioDestinoId;
  }

  /**
   * Encontrar por correo usuarios.
   *
   * @param correo the correo
   * @return the usuarios
   */
  public static Usuarios encontrarPorCorreo(String correo) {
    SessionFactory sessionFactory = hibernateUtil.buildSessionFactory();
    Session session = sessionFactory.openSession();
    session.beginTransaction();
    try{
      return session.createQuery("from Usuarios where correoElectronico = :correo", Usuarios.class).setParameter("correo", correo).getSingleResult();
    }catch(NoResultException e){
      return null;
    }finally{
      session.close();
    }
  }

  /**
   * Actualizar boolean.
   *
   * @param usuario the usuario
   * @return the boolean
   */
  public static boolean actualizar(Usuarios usuario) {
    SessionFactory sessionFactory = hibernateUtil.buildSessionFactory();
    Session session = sessionFactory.openSession();

    try {
      session.beginTransaction();
      session.update(usuario);
      session.getTransaction().commit();
      return true;
    } catch (Exception e) {
      if (session.getTransaction() != null) {
        session.getTransaction().rollback();
      }
      e.printStackTrace();
      return false;
    } finally {
      if (session != null && session.isOpen()) {
        session.close();
      }
    }
  }
}
